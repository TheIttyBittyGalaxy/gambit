/* Gambit gives us the following by default
    construct Game {
        static list<Player> players
    }

    construct Player(player_number) {
        static int player_number
    }
*/

enum Mark { NAUGHT, CROSS, DRAW }

extend Game {
    state Board board
    state current_sub_board?
    state Player current_player
}

extend Player {
    static Mark mark = match player_number {
        1: NAUGHT
        2: CROSS
    }
}

construct Board {
    state list<SubBoard 9> squares
    state Mark? mark
}

construct SubBoard {
    static int index
    static string name = ["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"][index]
    state list<Sqaure 9> squares
    state Mark? mark
}

construct Sqare(index) {
    static int index
    static string name = ["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"][index]
    state Mark? mark
}

main() {
    game.current_player = game.players[1]
    until board.mark {
        if not game.current_sub_board: choose_sub_board()
        
        square = make_move(game.current_sub_board)
        detect_winner(game.current_sub_board)
        detect_winner(game.board)

        if not board.mark {
            if game.current_player == game.players[1]: game.current_player = game.players[2]
            else: game.current_player = game.players[1]

            next_sub_board = game.board.squares[name: square.name]
            if next_sub_board.mark: game.current_sub_board = none
            else: game.current_sub_board = next_sub_board
        }
    }

    winner = Player[mark: board.mark] // Infer `winner` as type `Player?`, as there is no winner with the `DRAW` mark.
    if winner: winner wins
}

choose_sub_board() {
    options = game.board filter (sub_board: sub_board.mark == none)
    game.current_sub_board = game.current_player choose options ("Which board would you like to play in?")
}

make_move(SubBoard board) {
    options = board filter (square: square.mark == none)
    choice = game.current_player choose options ("Which sqaure do you want to play?")
    choice.mark = game.current_player.mark
    return choice
}

detect_winner(Board|SubBoard board) {
    lines = [ // infer type as `list<int 8*3>`
        [1, 2, 3], [4, 5, 6], [7, 8, 9],
        [1, 4, 7], [2, 5, 8], [3, 6, 9],
        [1, 5, 9], [3, 5, 7],
    ]

    for line in lines { // Infer type of `line` as `list<int 3>`
        marks = line transform (index: board.squares[index].mark) // Inger type of `board.squares[index]` as `SubBoard|Sqaure`. Infer type of `marks` as `list<Mark? 3>`
        mark = mark[1]
        if marks[1] == marks[2] and marks[2] == marks[3] {
            board.mark = mark
            break
        }
    }

    for sqaure in game.board: if not square.mark: return
    board.mark = DRAW
}